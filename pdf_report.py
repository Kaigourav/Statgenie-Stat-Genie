import json
import plotly.io as pio
import numpy as np
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle, KeepTogether
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
import io
import os
from reportlab.lib.utils import ImageReader
# === Config ===
LOGO_PATH = "statgenie_logo.png"  # set your logo path here
FOOTER_TEXT = "Generated by StatGenie"

# === Styles ===
styles = getSampleStyleSheet()
styles.add(ParagraphStyle(
    name="SectionTitle",
    fontSize=16,
    leading=20,
    spaceAfter=10,
    textColor=colors.HexColor("#2C3E50"),
    underlineWidth=1,
    underlineOffset=-2,
))
styles.add(ParagraphStyle(
    name="SubTitle",
    fontSize=13,
    leading=16,
    textColor=colors.HexColor("#34495E"),
    spaceAfter=6,
))
styles.add(ParagraphStyle(
    name="NormalText",
    fontSize=10,
    leading=14,
    spaceAfter=4,
))
styles.add(ParagraphStyle(
    name="Footer",
    fontSize=8,
    leading=10,
    textColor=colors.grey,
    alignment=1
))

# === Helper Functions ===
def _sanitize_for_plotly(obj):
    if isinstance(obj, dict):
        return {k: _sanitize_for_plotly(v) for k, v in obj.items()}
    elif isinstance(obj, (list, tuple)):
        return [_sanitize_for_plotly(v) for v in obj]
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, (np.integer,)):
        return int(obj)
    elif isinstance(obj, (np.floating,)):
        return float(obj)
    elif obj is None:
        return None
    return obj

def create_scaled_table(data, page_width):
    num_cols = len(data[0])
    col_width = page_width / num_cols
    table = Table(data, colWidths=[col_width]*num_cols, hAlign='LEFT')
    style = TableStyle([
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
        ('FONTSIZE', (0,0), (-1,-1), 8),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#34495E")),
    ])
    table.setStyle(style)
    for r, row in enumerate(data):
        for c, cell in enumerate(row):
            table._cellvalues[r][c] = Paragraph(str(cell), styles["NormalText"])
    return table

def add_footer(canvas, doc):
    canvas.saveState()
    width, height = A4
    if os.path.exists(LOGO_PATH):
        logo = ImageReader(LOGO_PATH)
        canvas.drawImage(logo, x=doc.leftMargin, y=10, width=70, height=70, mask='auto')
    canvas.setFont("Helvetica", 8)
    canvas.setFillColor(colors.grey)
    canvas.drawCentredString(width/2, 12, FOOTER_TEXT)
    canvas.restoreState()

# === Main PDF Generator ===
def generate_pdf_report(analysis: dict, pdf_path: str):
    doc = SimpleDocTemplate(pdf_path, pagesize=A4,
                            leftMargin=40, rightMargin=40,
                            topMargin=60, bottomMargin=60)
    story = []

    page_width = A4[0] - doc.leftMargin - doc.rightMargin

    # --- Title ---
    story.append(Paragraph("üìä StatGenie Data Analysis Report", styles["Title"]))
    story.append(Spacer(1, 18))

    # --- Dataset Shape ---
    shape = analysis.get("shape", {})
    story.append(Paragraph(
        f"<b>Dataset Shape:</b> {shape.get('rows', 0)} rows √ó {shape.get('columns', 0)} columns",
        styles["NormalText"]
    ))
    story.append(Spacer(1, 12))

    # --- KPIs ---
    story.append(Paragraph("‚ú® Key Performance Indicators", styles["SectionTitle"]))
    for kpi in analysis.get("kpis", []):
        story.append(Paragraph(f"‚Ä¢ {kpi['name']}: <b>{kpi['value']}</b>", styles["NormalText"]))
    story.append(Spacer(1, 12))

    # --- Applied Filters / Slicers ---
    story.append(Paragraph("üéöÔ∏è Applied Filters", styles["SectionTitle"]))
    
    filters = analysis.get("filters", {})
    if not filters:
        story.append(Paragraph("No filters applied", styles["NormalText"]))
    else:
        for key, condition in filters.items():
            if isinstance(condition, list):
                story.append(Paragraph(f"{key}: {', '.join(map(str, condition))}", styles["NormalText"]))
            elif isinstance(condition, dict):
                rng = []
                if "min" in condition:
                    rng.append(f"min={condition['min']}")
                if "max" in condition:
                    rng.append(f"max={condition['max']}")
                story.append(Paragraph(f"{key}: {' , '.join(rng)}", styles["NormalText"]))
            else:
                story.append(Paragraph(f"{key}: {condition}", styles["NormalText"]))
    
    story.append(Spacer(1, 12))


    # --- Numeric Summary ---
    numeric = analysis.get("numeric_summary", {})
    if numeric:
        story.append(Paragraph("üî¢ Numeric Summary", styles["SectionTitle"]))
        num_data = [["Column", "Count", "Mean", "Std", "Min", "25%", "50%", "75%", "Max"]]
        for col, stats in numeric.items():
            num_data.append([
                col, stats.get("count", ""), stats.get("mean", ""), stats.get("std", ""),
                stats.get("min", ""), stats.get("25%", ""), stats.get("50%", ""),
                stats.get("75%", ""), stats.get("max", "")
            ])
        story.append(KeepTogether(create_scaled_table(num_data, page_width)))
        story.append(Spacer(1, 12))

    # --- Categorical Summary ---
    categorical = analysis.get("categorical_summary", {})
    if categorical:
        story.append(Paragraph("üî† Categorical Summary", styles["SectionTitle"]))
        cat_data = [["Column", "Unique Count", "Top 5 Values"]]
        for col, stats in categorical.items():
            top5_str = ", ".join([f"{k}({v})" for k, v in stats.get("top_5_values", {}).items()])
            cat_data.append([col, stats.get("unique_count", ""), top5_str])
        story.append(KeepTogether(create_scaled_table(cat_data, page_width)))
        story.append(Spacer(1, 12))

    # --- Charts & Insights ---
    story.append(Paragraph("üìà Charts & Insights", styles["SectionTitle"]))
    
    charts = analysis.get("charts", {})
    for chart_key, chart_info in charts.items():
        summary = chart_info.get("summary", chart_key)
        fig_json = chart_info.get("figure")
    
        if fig_json:
            try:
                # Sanitize and convert Plotly JSON to figure
                clean_json = _sanitize_for_plotly(fig_json)
                fig = pio.from_json(json.dumps(clean_json))
                
                # Convert figure to PNG bytes
                img_bytes = pio.to_image(fig, format="png", width=600, height=400, scale=2)
                img_buf = io.BytesIO(img_bytes)
    
                # Add chart title and image
                story.append(Paragraph(f"{summary}", styles["SubTitle"]))
                story.append(Image(img_buf, width=400, height=280))
                story.append(Spacer(1, 8))
    
            except Exception as e:
                story.append(Paragraph(
                    f"‚ö†Ô∏è Could not render chart '{chart_key}': {str(e)}",
                    styles["NormalText"]
                ))
                story.append(Spacer(1, 12))

    # --- Data Story ---
    story.append(PageBreak())
    story.append(Paragraph("üìñ Data Story", styles["SectionTitle"]))
    story.append(Paragraph(analysis.get("data_story", ""), styles["NormalText"]))

    # --- Build PDF ---
    doc.build(story, onFirstPage=add_footer, onLaterPages=add_footer)
